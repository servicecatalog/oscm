$custom-color-key: 'base' !default;

/*$color-palette: () !default; */

/* $color-palette: (
   "primary": $primary,
   "secondary": $secondary
   )
); */
   
/*  'primary': (
    'base': #8e3329,
    'light': #d9534f,
    'dark': #c9302c
  ),
  'secondary': (
    'base': #5a1321,
    'light': #7b1a2d,
    'dark': #51111e
  ), 
  'foreground': (
    'base': #191919,
    'light': #333333,
    'dark': #111111,
    'darker': #000000
  ),
  'background': (
    'base': #e9e9e9,
    'light': #ffffff,
    'dark': #dddddd
  )
); */

/* @function color-get($key: 'primary') {
  @return map-get($color-palette, $key);
} */

@mixin color-set($color-palette, $color-name, $color-value) {
  $color_map: ( $color-name: $color-value);
   @debug map-merge($color-palette, $color_map);
}

@function get-shades-for-color($palette, $key) {
  @if not map-has-key($palette, 'background') {
    @warn "`#{inspect($color-palette)}` doesn't seem to have a key named `background`.";
  }

  @return map-get($color-palette, 'background');
}




@function generate-shades-for-color($color-name, $base-color) {
  $light-color: mix($white, $base-color, 80%); 
  $dark-color: mix($black, $base-color, 40%);
  $darkest-color: mix($black, $base-color, 80%);
  
  /*$light-color: $custom-theme-color-100;
  $dark-color: $custom-theme-color-700;
  $darkest-color: $custom-theme-color-900; */
  
  $shades-for-color: ( $color-name: (
        'base': $base-color,
        'light': $light-color,
        'dark': $dark-color,
        'darkest': $darkest-color
        )
    );
  
  @return map-merge($color-palette, $shades-for-color);
}

@function color-scheme-get($color-name, $color-tone: null) {
  // color tone is optional
  @if ($color-tone != null) {
     @return map-get(map-get($color-palette, $color-name), $color-tone);
  } 
  @else {  
     @return map-get($color-palette, $color-name);
  }
} 