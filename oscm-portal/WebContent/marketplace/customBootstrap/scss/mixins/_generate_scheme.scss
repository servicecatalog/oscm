 $lightest-color: $white;
 
 $basic-palette: (
   "primary": $primary,
   "secondary": $secondary,
   "foreground": (
    "base": $theme-foreground-color,
    "lightest": $lightest-color
    )  
   );

@function generate-shades-for-color($palette, $color-name, $base-color) {
  $light-color: mix($white, $base-color, 80%); 
  $dark-color: mix($black, $base-color, 40%);
  $darkest-color: mix($black, $base-color, 80%);
  
  $shades-map-for-color: ( $color-name: (
        'base': $base-color,
        'light': $light-color,
        'dark': $dark-color,
        'darkest': $darkest-color
        )
    );
  
  @return map-merge($palette, $shades-map-for-color);
}

@function color-scheme-get($color-name, $color-tone: null) {
  // color tone is optional
  @if ($color-tone != null) {
     @return map-get(map-get($color-palette, $color-name), $color-tone);
  } 
  @else {  
     @return map-get($color-palette, $color-name);
  }
} 

@function generate-scheme() {
 $base-background-color: $blue;
 $color-palette: generate-shades-for-color($basic-palette, "background", $base-background-color);
 @return $color-palette;
}


@function generate-color-scheme($primary, $secondary, $theme-foreground-color, $theme-background-color) {
  

 
  $palette: generate-shades-for-color($basic-palette, "background", $theme-background-color);
  @return $palette; 
}


